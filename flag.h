#ifndef _FLAG_H_
#define _FLAG_H_

#include "MPoint.h"
#include <math.h>

extern void FlyHigh();


bool flag(MPoint point)
{
	GLfloat distance = 0.2;
	GLfloat half = 2;
	GLint typeArray[]={
		0x3,0x5,0x5,0xD,0x3,0x5,0x5,0x9,
		0xA,0x3,0x5,0x5,0x4,0x5,0xD,0xA,
		0xA,0xA,0x3,0xC,0x7,0x1,0x9,0xA,
		0xE,0xA,0xA,0x3,0x1,0x8,0x6,0xC,
		0xB,0xA,0xA,0x6,0x4,0x4,0x3,0x9,
		0xA,0x6,0x4,0x1,0x5,0xD,0xA,0xA,
		0x2,0x5,0x5,0xC,0x7,0x5,0xC,0xA,
		0x6,0x5,0x5,0x5,0x5,0x5,0x5,0xC
	};
	GLfloat centerX = 4 * floor(point.getX() / 4) + 2;
	GLfloat centerZ = 4 * floor(point.getZ() / 4) + 2;
	GLint num = ((centerZ + 2) / 4 + 3) * 8 + (centerX + 2) / 4 + 4;
	GLint type = typeArray[num-1];
	// [East,South,West,North]
	if (point.getX()<4 && point.getX()>-4 && point.getZ()<4 && point.getZ()>-4)
		FlyHigh();
	if ((type & 0x1) && point.getZ() <= (centerZ - half + distance))
		return false;
	if ((type & 0x4) && point.getZ() >= (centerZ + half - distance))
		return false;
	if ((type & 0x2) && point.getX() <= (centerX - half + distance))
		return false;
	if ((type & 0x8) && point.getX() >= (centerX + half - distance))
		return false;
	return true;
}

#endif